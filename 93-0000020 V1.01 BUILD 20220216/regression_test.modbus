# Use this to regression test the HyPR 6000 after modifying firmware
# write out of bound values to the writable registers and read back the bounded value,
# then write a good value to make sure we actually changed something.
# AGS only receives updates from controller every three seconds, so wait 6 seconds to allow for a collision
BIT, 1, False, 0.1, 1, ASSERT:x==0,
START_VOLTAGE, 199, True, 3.1, 1, ASSERT:x=='OK'
START_VOLTAGE, 1, False, 0.1, 1, ASSERT:x==200
START_VOLTAGE, 301, True, 3.1, 1, ASSERT:x=='OK'
START_VOLTAGE, 1, False, 0.1, 1, ASSERT:x==300
START_VOLTAGE, 250, True, 3.1, 1, ASSERT:x=='OK'
START_VOLTAGE, 1, False, .1, 1, ASSERT:x==250
START_DELAY, 255, True, 3.1, 1, ASSERT:x=='OK'
START_DELAY, 1, False, 0.1, 1, ASSERT:x==254
START_DELAY, 15, True, 3.1, 1, ASSERT:x=='OK'
START_DELAY, 1, False, .1, 1, ASSERT:x==15
STOP_VOLTAGE, 199, True, 3.1, 1, ASSERT:x=='OK'
STOP_VOLTAGE, 1, False, 0.1, 1, ASSERT:x==200
STOP_VOLTAGE, 301, True, 3.1, 1, ASSERT:x=='OK'
STOP_VOLTAGE, 1, False, .1, 1, ASSERT:x==300
STOP_VOLTAGE, 285, True, 3.1, 1, ASSERT:x=='OK'
STOP_VOLTAGE, 1, False, .1, 1, ASSERT:x==285
STOP_DELAY, 255, True, 3.1, 1, ASSERT:x=='OK'
STOP_DELAY, 1, False, 0.1, 1, ASSERT:x==254
STOP_DELAY, 15, True, 3.1, 1, ASSERT:x=='OK'
STOP_DELAY, 1, False, .1, 1, ASSERT:x==15
MAX_CHARGING_CURRENT, 101, True, 3.1, 1, ASSERT:x=='OK'
MAX_CHARGING_CURRENT, 1, False, 0.1, 1, ASSERT:x==100
MAX_CHARGING_CURRENT, 0, True, 3.1, 1, ASSERT:x=='OK'
MAX_CHARGING_CURRENT, 1, False, 0.1, 1, ASSERT:x==0
MAX_CHARGING_CURRENT, 19, True, 3.1, 1, ASSERT:x=='OK'
MAX_CHARGING_CURRENT, 1, False, .1, 1, ASSERT:x==10
LVCO, 199, True, 3.1, 1, ASSERT:x=='OK'
LVCO, 1, False, 0.1, 1, ASSERT:x==200
LVCO, 301, True, 3.1, 1, ASSERT:x=='OK'
LVCO, 1, False, .1, 1, ASSERT:x==300
LVCO, 240, True, 3.1, 1, ASSERT:x=='OK'
LVCO, 1, False, .1, 1, ASSERT:x==240
GEN_CONTROL, 2, True, 3.1, 1, ASSERT:x=='OK'
GEN_CONTROL, 1, False, 0.1, 1, ASSERT:x==0
GEN_CONTROL, 5, True, 3.1, 1, ASSERT:x=='OK'
GEN_CONTROL, 1, False, 0.1, 1, ASSERT:x==5
GEN_CONTROL, 1, True, 3.1, 1, ASSERT:x=='OK'
GEN_CONTROL, 1, False, 0.1, 1, ASSERT:x==1
GEN_CONTROL, 0, True, 3.1, 1, ASSERT:x=='OK'
GEN_CONTROL, 1, False, 0.1, 1, ASSERT:x==0
GENERATOR_POWER_SETTINGS, 5001, True, 3.1, 1, ASSERT:x=='OK'
GENERATOR_POWER_SETTINGS, 1, False, 0.1, 1, ASSERT:x==5000
GENERATOR_POWER_SETTINGS, 999, True, 3.1, 1, ASSERT:x=='OK'
GENERATOR_POWER_SETTINGS, 1, False, .1, 1, ASSERT:x==1000
GENERATOR_POWER_SETTINGS, 3099, True, 3.1, 1, ASSERT:x=='OK'
GENERATOR_POWER_SETTINGS, 1, False, .1, 1, ASSERT:x==3000
# Read each read-only register and verify it's a sane value
TOTAL_ERRORS, 1, False, 0.1, 1, ASSERT:x>=0
CRANK_TIMEOUT, 1, False, 0.1, 1, ASSERT:x>=0
REGULATED_VOLTAGE, 1, False, 0.1, 1, ASSERT:x>=274 and x<=286
BUS_VOLTAGE, 1, False, 0.1, 1, ASSERT:x>=200 and x<=300
CURRENTS, 1, False, 0.1, 1, ASSERT:int(x/256)>=0 and x%254>=0
# AC_INPUT is write-only to the Controller, and read-only at the AGS
AC_INPUT, 1, False, 0.1, 1, ASSERT:x==0 or x==1
AMMPS_RESPONSE, 1, False, 0.1, 1, ASSERT:x>=0 and x<=0b111111
GEN_WARMUP, 1, False, .1, 1, ASSERT:x==30
WARMUP_STATE, 1, False, 0.1, 1, ASSERT:x==0 or x==1 or x==2
GENERATOR_POWER_SETTINGS, 1, False, 0.1, 1, ASSERT:x>=1000 and x<=5000 and (x%100)==0
AVAILABLE_CURRENT, 1, False, 0.1, 1, ASSERT:x>=0 and x<=100
CHARGER_MODE, 1, False, 0.1, 1, ASSERT:x>=0 and x<=3
TOTAL_REGS_SIZE, 1, False, 0.1, 1, ASSERT:x==57
# Try to write the read-only registers and get the error
